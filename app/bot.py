from aiogram import Router, types
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from . import storage
from .modules import weather, news, currency, quote

router = Router()

@router.message(Command("start"))
async def cmd_start(msg: types.Message):
    storage.upsert_user(msg.from_user.id)
    await msg.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø—Ä–∏—à–ª—é —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç: –ø–æ–≥–æ–¥–∞ (–Ø–Ω–¥–µ–∫—Å), –∫—É—Ä—Å—ã, –∫–æ—Ä–æ—Ç–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Ü–∏—Ç–∞—Ç–∞ –¥–Ω—è.\n\n"
        "–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏ –≥–æ—Ä–æ–¥: –Ω–∞–ø–∏—à–∏ \n/city –ú–æ—Å–∫–≤–∞\n\n"
        "–ò –≤—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n/time 09:00\n\n"
        "–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Ç–µ–º—ã –Ω–æ–≤–æ—Å—Ç–µ–π: /follow –¢—Ä–∞–º–ø ‚Äî –ø—Ä–∏—Å—ã–ª–∞—Ç—å –Ω–æ–≤—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –ø–æ —Ç–µ–º–µ\n"
        "/subs ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫, /unfollow –¢—Ä–∞–º–ø ‚Äî —É–¥–∞–ª–∏—Ç—å\n\n"
        "–ö–æ–≥–¥–∞ –≥–æ—Ç–æ–≤ ‚Äî –ø—Ä–∏—à–ª—é –¥–∞–π–¥–∂–µ—Å—Ç –∫–æ–º–∞–Ω–¥–æ–π /daily"
    )

@router.message(Command("help"))
async def cmd_help(msg: types.Message):
    await msg.answer(
        "/start ‚Äî –Ω–∞—á–∞—Ç—å\n"
        "/city <–≥–æ—Ä–æ–¥> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥ –¥–ª—è –ø–æ–≥–æ–¥—ã\n"
        "/time <–ß–ß:–ú–ú> ‚Äî –≤—Ä–µ–º—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏\n"
        "/daily ‚Äî –ø—Ä–∏—Å–ª–∞—Ç—å –¥–∞–π–¥–∂–µ—Å—Ç —Å–µ–π—á–∞—Å\n"
        "/settings ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
        "/follow <–∑–∞–ø—Ä–æ—Å> ‚Äî –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ç–µ–º—É\n"
        "/unfollow <–∑–∞–ø—Ä–æ—Å> ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n"
        "/subs ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫"
    )

@router.message(Command("city"))
async def cmd_city(msg: types.Message):
    parts = msg.text.split(maxsplit=1)
    if len(parts) < 2:
        await msg.reply("–£–∫–∞–∂–∏ –≥–æ—Ä–æ–¥: /city –ú–æ—Å–∫–≤–∞")
        return
    city = parts[1].strip()
    storage.set_user_settings(msg.from_user.id, city=city)
    await msg.reply(f"–ì–æ—Ä–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {city}")

@router.message(Command("time"))
async def cmd_time(msg: types.Message):
    parts = msg.text.split(maxsplit=1)
    if len(parts) < 2 or ":" not in parts[1]:
        await msg.reply("–£–∫–∞–∂–∏ –≤—Ä–µ–º—è: /time 09:00")
        return
    hh, mm = parts[1].split(":")
    try:
        hh, mm = int(hh), int(mm)
        if not (0 <= hh <= 23 and 0 <= mm <= 59):
            raise ValueError
    except Exception:
        await msg.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è. –ü—Ä–∏–º–µ—Ä: /time 09:00")
        return
    storage.set_user_settings(msg.from_user.id, notify_hour=hh, notify_min=mm)
    await msg.reply(f"–í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {hh:02d}:{mm:02d}")

@router.message(Command("settings"))
async def cmd_settings(msg: types.Message):
    u = storage.get_user(msg.from_user.id) or {}
    text = (
        f"–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
        f"–ì–æ—Ä–æ–¥: {u.get('city') or '–Ω–µ –∑–∞–¥–∞–Ω'}\n"
        f"–í—Ä–µ–º—è: {u.get('notify_hour',9):02d}:{u.get('notify_min',0):02d}\n"
        f"–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {u.get('tz','Europe/Amsterdam')}"
    )
    await msg.reply(text)

@router.message(Command("follow"))
async def cmd_follow(msg: types.Message):
    parts = msg.text.split(maxsplit=1)
    if len(parts) < 2:
        await msg.reply("–£–∫–∞–∂–∏ —Ç–µ–º—É: /follow –¢—Ä–∞–º–ø")
        return
    q = parts[1].strip()
    ok = storage.add_subscription(msg.from_user.id, q)
    if ok:
        await msg.reply(f"–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: ¬´{q}¬ª. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –≤—ã–π–¥–µ—Ç —á—Ç–æ‚Äë—Ç–æ –Ω–æ–≤–æ–µ ‚Äî –ø—Ä–∏—à–ª—é.")
    else:
        await msg.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É.")

@router.message(Command("unfollow"))
async def cmd_unfollow(msg: types.Message):
    parts = msg.text.split(maxsplit=1)
    if len(parts) < 2:
        await msg.reply("–£–∫–∞–∂–∏ —Ç–µ–º—É: /unfollow –¢—Ä–∞–º–ø")
        return
    q = parts[1].strip()
    storage.remove_subscription(msg.from_user.id, q)
    await msg.reply(f"–ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞: ¬´{q}¬ª.")

@router.message(Command("subs"))
async def cmd_subs(msg: types.Message):
    subs = storage.list_subscriptions(msg.from_user.id)
    if not subs:
        await msg.reply("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫. –î–æ–±–∞–≤—å: /follow –¢—Ä–∞–º–ø")
        return
    text = "–¢–≤–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏:\n" + "\n".join([f"‚Ä¢ {s}" for s in subs])
    await msg.reply(text)

def render_digest_text(u):
    parts = []
    w = weather.fetch_weather(u.get('city') or '–ê–º—Å—Ç–µ—Ä–¥–∞–º')
    if w:
        parts.append(f"üå§ <b>–ü–æ–≥–æ–¥–∞</b>\n{w}")
    c = currency.fetch_currencies()
    if c:
        parts.append(f"üí± <b>–ö—É—Ä—Å—ã</b>\n{c}")
    parts.append(f"üí° {quote.random_quote()}")
    return "\n\n".join(parts)

async def send_news_cards(msg: types.Message, items):
    for it in items:
        kb = InlineKeyboardBuilder()
        if it.get("link"):
            kb.button(text="–û—Ç–∫—Ä—ã—Ç—å –Ω–æ–≤–æ—Å—Ç—å", url=it["link"])
        await msg.answer(
            f"üóû <b>{it['title']}</b>\n–ò—Å—Ç–æ—á–Ω–∏–∫: {it.get('source','')}",
            reply_markup=kb.as_markup() if it.get("link") else None,
            parse_mode="HTML"
        )

@router.message(Command("daily"))
async def cmd_daily(msg: types.Message):
    u = storage.get_user(msg.from_user.id) or {"city":"–ê–º—Å—Ç–µ—Ä–¥–∞–º","notify_hour":9,"notify_min":0}
    digest = render_digest_text(u)
    await msg.reply(digest, parse_mode="HTML")
    items = news.fetch_news(limit=5, per_feed=3)
    if items:
        await send_news_cards(msg, items)
